<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_archer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>smart = false;
patrol = false;
vel_x = -3;
vel_y = 0;
gravity_y = 1;
fire_rate = room_speed;
show_arrow_checks = false;  //Debug boolean. You can also turn it on for fun

//Arrow stuff
max_power = 20;
min_power = 10;
range[0] = 0;
range[1] = 180;

alarm[0] = fire_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var match_x = 0;
var match_y = 0;
var match = false;

if (!smart){
//if (1) {
    var arrow = instance_create(x,y,obj_arrow)
    with (arrow){
        angle = random(other.range[1] - other.range[0]) * pi / 180 + pi / 2;
        pow = random(other.max_power - other.min_power) + other.min_power;
        vel_x = pow * sin(angle);
        vel_y = pow * cos(angle);
    }
} else {
    if distance_to_object(obj_player) &lt; 300 {
        var i;
        for (i = min_power; i &lt;= max_power; i+= (max_power - min_power) / 2){
            var j;
            for (j = range[0]; j &lt;= range[1]; j+= (range[1] - range[0]) / 15){
                var x_pow = i * sin(degtorad(j) + pi/2);
                var y_pow = i * cos(degtorad(j) + pi/2);
                
                //var player_hit = ;
                if (screw_this_archer(x, y, x_pow, y_pow)){   
                    //show_debug_message("Found match at: " + string(x_pow) + " : " + string(y_pow));
                    match = true;
                    match_x = x_pow;
                    match_y = y_pow;
                    break;
                }
            }
            if (match){
                break;
            }
        }
    }
}
if (match){
    var arrow = instance_create(x,y,obj_arrow)
    with (arrow){
        vel_x = x_pow;
        vel_y = y_pow;
    }
}

alarm[0] = fire_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (patrol){
    // Let the dude walk on platforms
    /*if (!check_collision(x - 16,y + 26,object_index) || !check_collision(x + 16,y + 26,object_index)){
        vel_x *= -1;
        image_xscale *= -1;
    }*/
    
    // Change direction 
    if (check_collision(x + vel_x,y, object_index) || check_collision(x - vel_x, y, object_index)){
        vel_x *= -1;
        image_xscale *= -1;
    }

    x += vel_x;
}

// Do Gravity
if (!check_collision(x,y+1, object_index)){
    vel_y += gravity_y;
    y = y + vel_y;
} else {
    if (vel_y &gt; 0){
        while (check_collision(x,y,object_index)){
            y--;
        }
    }
    vel_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kill_player();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_axe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy = false;

with(obj_axe){
    if (abs(vel_x) &gt;= 0.01 &amp;&amp; abs(vel_y) &gt;= 0.01){
        other.destroy = true;
    }
}

if (destroy)
    instance_destroy();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
