<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stuck = false;

kill_timer = room_speed * 2;


dampening = 1;//smaller is more dampening
frict = 0;
//height=12;
//width=12;

gravity_x = 0;
gravity_y = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Gravity
vel_x+=gravity_x;
vel_y+=gravity_y;

//Dampening
if(abs(vel_x) &lt; .1)
    vel_x=0;
vel_x*=dampening;
//if on ground apply friction
if (check_collision(x, y+1, object_index))
    vel_x*=frict;
vel_y*=dampening;



//Update rotation

if(!check_collision(x,y+1,object_index)){
    image_angle = radtodeg(arctan(vel_y/-vel_x));
    if (vel_x &gt; 0){
        image_angle += 180;
    }
}


if (!stuck){
//if (1){
    //Update position
    if(check_collision(x+vel_x,y,object_index))
    {
        while(!check_collision(x+sign(vel_x),y,object_index))
        {
            x += sign(vel_x);
        }
        stuck = true;
    } else {
        x+=vel_x;
    }
    
    
    if(check_collision(x,y+vel_y,object_index))
    {
        while(!check_collision(x,y+sign(vel_y),object_index))
        {
            y += sign(vel_y);
        }
        stuck = true;
    } else {
        y+=vel_y;
    }
} else {
    kill_timer--;
    if (kill_timer &lt; 1){
        instance_destroy();
    }
}

if (abs(vel_y) &lt; .1 &amp;&amp; abs(vel_x) &lt; .1){
    kill_timer--;
    if (kill_timer &lt; 1){
        instance_destroy();
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (abs(vel_x) &gt; .1 &amp;&amp; abs(vel_y) &gt; .1){
    kill_player();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
