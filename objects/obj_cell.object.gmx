<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var w, cols, rows, i, j;

for (var i = 0; i &lt; 4; i++) {
    walls[i] = true;
}

visited = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (walls[0]) { // draw top wall
    bat = floor(random_range(0, w / 32))
    for (i = 0; i &lt; (w / 32); i++) {
        instance_create(x + i*32, y, obj_wall);
        if (i == bat){
            instance_create(x + i*32, y + 32, obj_bat);
        }
    }
}

if (walls[1]) { // draw right wall
//no_wall is trying to make holes in walls to give a little more variety
    for (i = 0; i &lt; (w / 32); i++) {
        //no_wall = floor(random_range(1,6))
        //if(no_wall % 2 == 1){
            instance_create(x + w - 32, y + i*32, obj_wall);
        //}
    }
}

if (walls[2]) { // draw bottom wall
    window = -1
    if (irandom(2) % 2 == 0){
        window = floor(random_range(2, w / 32 - 2))
    }
    for (i = 0; i &lt; (w / 32); i++) {
        instance_create(x + i*32, y + w - 32, obj_wall);
        if (i == window){
            instance_create(x + i*32, y + w - 96, obj_window);
            instance_create(x + i*32 - 10, y + w - 80, obj_candles);
        }
    }
}

if (walls[3]) { // draw left wall
    for (i = 0; i &lt; (w / 32); i++) {
        //no_wall = floor(random_range(1,6))
        //if(no_wall % 2 == 1){
            instance_create(x, y + i*32, obj_wall);
        //}
    }
}

if(instance_exists(obj_control)){
    with(obj_control){
        instance_destroy()
    }
}
instance_create(0,0,obj_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
