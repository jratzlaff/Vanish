<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_standing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_hitbox_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///constants
global.right = ord('D');
global.left = ord('A');
global.up = ord('W');
global.down = ord('S');
global.left_portal = ord('Q');
global.right_portal = ord('E');
global.jump = ds_list_create();
ds_list_add(global.jump, ord('W'));
ds_list_add(global.jump, vk_space);

//global.jump = ord('W');
global.throw = mb_left;
move_speed = .5;
air_move_speed = .7;
throw_speed = 25;//???
throw_momentum_percent = .5;
MAX_AMMO = 5;
ammo = MAX_AMMO;
in_air = false;
wall_friction = false;

jump_speed = 10;
jump_time = 12;
steps = 0;

wall_jump_vertical = 1.4;
wall_jump_horizontal = 1;

dampening = .95;//smaller is more dampening
frict = .9;//changes the dampening when in contact with the ground
wfrict = .7;//changes the dampening when holding against a wall
height=36;
width=18;

gravity_x = 0;
gravity_y =1;

jumping = false;
vel_x=0;
vel_y=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

anti_stuck_code();

//Gravity
vel_x+=gravity_x;
vel_y+=gravity_y;

//Dampening
if(abs(vel_x) &lt; .1)
    vel_x=0;
vel_x*=dampening;
//if on ground apply friction
if (check_collision(x, y+1, object_index))
    vel_x*=frict;
if (wall_friction)//holding against a wall
    vel_y*=wfrict;
vel_y*=dampening;



//Update position
if (check_collision(x + vel_x, y, object_index))
{
    var xn = x;
    while(!check_collision(xn+sign(vel_x),y, object_index))
    {   
        xn += sign(vel_x);
    }
    x=xn;
    if(!place_meeting(x,y,obj_portal_left) &amp;&amp; ! place_meeting(x,y,obj_portal_right) || x==xprevious)
        vel_x = 0;
 
}
else
    x+=vel_x;


if(check_collision(x,y+vel_y, object_index))
{
    var yn =y;
    while(!check_collision(x,yn+sign(vel_y), object_index))
    {
        yn += sign(vel_y);
    }
    y=yn;
    if(!place_meeting(x,y,obj_portal_left) &amp;&amp; ! place_meeting(x,y,obj_portal_right) || y==yprevious)
        vel_y = 0;
    
}
else
    y+=vel_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///key presses

if (x &lt; 1)
    x = 1;
if (x &gt; room_width-1)
    x = room_width-1;
if (y &lt; 1)
    y = 1;
if (y &gt; room_height-1)
    kill_player();
    
in_air = !check_collision(x, y+1, object_index)
wall_friction = false;
if( keyboard_check(global.left))
{
    with(obj_player){
        if (in_air){
            sprite_index = spr_jumping;
            image_xscale = -1;
        } else {
            sprite_index = spr_walking;
            image_xscale = -1;
            image_speed = .2;
        } 
    }
    if ( check_collision(x-1,y, object_index))//wall jump
    {
        //apply wall friction
        if(!jumping &amp;&amp; ! check_collision(x,y+1,object_index)){
        
            wall_friction=true;
            if(keyboard_check_pressed_any(global.jump)){
                vel_x+=wall_jump_horizontal*jump_speed;
                vel_y-=wall_jump_vertical*jump_speed;
            }
        }
    }
    //if( place_meeting(x,y+1,obj_wall))// On ground?
    if (check_collision(x, y+1, object_index))
        vel_x-=move_speed;
    vel_x-=air_move_speed ;
}

if(keyboard_check_pressed_any(global.jump) &amp;&amp; check_collision(x, y+1, object_index))
{
    sprite_index = spr_jumping;
    jumping = true;
    steps = 0;
}
if(jumping) {
    steps+=1;
    if(steps % 2 == 1)
        vel_y-=(jump_speed/steps);
}
if(steps&gt; jump_time || keyboard_check_released_any(global.jump) || check_collision(x, y-1, object_index)){
    jumping = false;
}
if( keyboard_check(global.right))
{
    with(obj_player){
        if (in_air){
            sprite_index = spr_jumping;
            image_xscale = 1;
        } else {
            sprite_index = spr_walking;
            image_xscale = 1;
            image_speed = .2;
        }   
    }
    if ( check_collision(x+1,y, object_index))//wall jump
    {
        //apply wall friction
        
        if(!jumping &amp;&amp; ! check_collision(x,y+1,object_index)){
            wall_friction=true;
            if(keyboard_check_pressed_any(global.jump)){
                vel_x-=wall_jump_horizontal*jump_speed;
                vel_y-=wall_jump_vertical*jump_speed;
            }
        }
    }
    if(check_collision(x, y+1, object_index))// On ground?
        vel_x+=move_speed;
    vel_x+=air_move_speed ;
}

if ( !keyboard_check(global.right) &amp;&amp; !keyboard_check(global.left)) {
    with(obj_player){
        if (in_air){
            sprite_index = spr_jumping;
        } else {
            sprite_index = spr_standing;
            image_speed = .2;
        }     
    }
}


//if( (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+height,obj_wall)) &amp;&amp; vel_y &lt;= 0 &amp;&amp; keyboard_check(global.jump))
//{
//    vel_y-=jump_speed ;
//}
if(mouse_check_button_pressed(global.throw))
{
    if (ammo &gt; 0){
        ammo--;
        var inst = instance_create(x,y,obj_axe);
        with(inst){
            var del_x = mouse_x-x;
            var del_y = mouse_y-y;
            var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
            vel_x=other.throw_momentum_percent*other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
            vel_y=other.throw_momentum_percent*other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
            image_xscale=sign(vel_x);
        }
    }
}

if (keyboard_check(global.left_portal)){
    if (instance_number(obj_moving_portal) &lt; 1){
        var inst = instance_create(x,y,obj_moving_portal);//TODO find wall
        with(inst){
            sprite_index = spr_moving_left_portal;
            var x_vec = mouse_x - x;
            var y_vec = mouse_y - y;
            var x_percent = abs(x_vec)/(abs(x_vec)+abs(y_vec));
            vel_x = sign(x_vec)*abs(x_percent * travel_speed);
            vel_y = sign(y_vec)*abs((1-x_percent) * travel_speed);
            image_angle = radtodeg(arctan(vel_y / -vel_x));
            portal_id=0;
        }
    }
}

if (keyboard_check(global.right_portal)){
    if (instance_number(obj_moving_portal) &lt; 1){
        var inst = instance_create(x,y,obj_moving_portal);//TODO find wall
        with(inst){
            sprite_index = spr_moving_right_portal;
            var x_vec = mouse_x - x;
            var y_vec = mouse_y - y;
            var x_percent = abs(x_vec)/(abs(x_vec)+abs(y_vec));
            vel_x = sign(x_vec)*abs(x_percent * travel_speed);
            vel_y = sign(y_vec)*abs((1-x_percent) * travel_speed);
            image_angle = radtodeg(arctan(vel_y / -vel_x));
            portal_id=1;
        }
    }
}

/*if(keyboard_check(global.left_portal))
{
    with(obj_portal)
    {
        if(sprite_index==spr_left_portal)
            instance_destroy();
    }
    var inst = instance_create(mouse_x,mouse_y,obj_portal);//TODO find wall
    with(inst)
    {
        var del_x = mouse_x-x;
        var del_y = mouse_y-y;
        var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
        vel_x=other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
        vel_y=other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
        sprite_index=spr_left_portal;
    }
}
if(keyboard_check(global.right_portal))
{
    with(obj_portal)
    {
        if(sprite_index==spr_right_portal)
            instance_destroy();
    }
    var inst = instance_create(mouse_x,mouse_y,obj_portal);
    with(inst)
    {
        var del_x = mouse_x-x;
        var del_y = mouse_y-y;
        var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
        vel_x=other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
        vel_y=other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
        sprite_index=spr_right_portal;
    }
}*/




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal_clear">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_moving_portal){
    instance_destroy();
}

with(obj_portal_right){
    instance_destroy();
}

with(obj_portal_left){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do_lightning();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
