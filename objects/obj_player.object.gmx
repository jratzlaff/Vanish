<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_standing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_hitbox_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///constants
global.right = ord('D');
global.left = ord('A');
global.up = ord('W');
global.down = ord('S');
global.left_portal = ord('Q');
global.right_portal = ord('E');
global.jump = ds_list_create();
ds_list_add(global.jump, ord('W'));
ds_list_add(global.jump, vk_space);
global.throw = mb_left;

has_double_jump = true;
state_changed = false;
enum player_states {
    stationary,
    running,
    jumping,
    wall_slide,
    wall_jump,
    double_jump,
    falling,
    landing,
    rolling,
    death
}

player_state = player_states.stationary;

move_speed = 2.5;
air_move_speed = .5;
max_move_speed = 10;
max_absolute_speed = 40;
throw_speed = 30;//???
throw_momentum_percent = .5;
MAX_AMMO = 5;
ammo = MAX_AMMO;
in_air = false;
wall_friction = false;

jump_speed = 10.75;
jump_time = 12;
steps = 0;

wall_jump_vertical = 1.2;
wall_jump_horizontal = .9;

dampening = .9;//smaller is more dampening
frict = .65;//changes the dampening when in contact with the ground
wfrict = .7;//changes the dampening when holding against a wall
minimum_roll_speed = 1;
min_running_speed = .2;
height=36;
width=18;

gravity_x = 0;
gravity_y =1;

jumping = false;
vel_x=0;
vel_y=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply general forces

vel_y+=gravity_y;
vel_x*=dampening;
vel_y*=dampening;
if(abs(vel_x) &gt; max_absolute_speed)
    vel_x = sign(vel_x) * max_absolute_speed;
if(abs(vel_y) &gt; max_absolute_speed)
    vel_y = sign(vel_y) * max_absolute_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stationary
if (player_state == player_states.stationary){
if(state_changed){
    //TODO:set sprite
    state_changed = false;
    sprite_index = spr_walking;
    image_speed = .2;
}

if( keyboard_check(global.left)){
    if(! keyboard_check(global.right)){
        vel_x-=move_speed;
        player_state = player_states.running;
        state_changed= true;
        
    }
}

if( keyboard_check(global.right)){
    if(! keyboard_check(global.left)){
        vel_x+=move_speed;
        player_state = player_states.running;
        state_changed= true;
    }
}

if (keyboard_check_pressed_any(global.jump)){
    player_state = player_states.jumping;
    state_changed= true;
}




}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///running
if (player_state == player_states.running){
if(state_changed){
    //TODO:change animation
    sprite_index = spr_walking;
    state_changed = false;
    image_speed = .3;
}
vel_x*=frict;
if( keyboard_check(global.left)){
    if(! keyboard_check(global.right)){
        vel_x-=move_speed;        
        image_xscale = -1;
    }
}

if( keyboard_check(global.right)){
    if(! keyboard_check(global.left)){
        vel_x+=move_speed;
        image_xscale = 1;
    }
}

if (keyboard_check_pressed_any(global.jump)){
    player_state = player_states.jumping;
    state_changed= true;
}

if(!state_changed){
    if(abs(vel_x) &lt; min_running_speed){
        vel_x = 0;
        state_changed = false;
        player_state = player_states.stationary;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping
if(player_state = player_states.jumping){

    if( state_changed){
        //TODO: set sprite
        sprite_index = spr_jumping;
        steps = 0;
        state_changed = false
    }
    if( keyboard_check(global.left)){
        if(! keyboard_check(global.right)){
            vel_x-=air_move_speed;   
            image_xscale = -1;     
        }
    }

    if( keyboard_check(global.right)){
        if(! keyboard_check(global.left)){
            vel_x+=air_move_speed;
            image_xscale = -1;
        }
    }
    if( keyboard_check_released_any(global.jump) or steps &gt; jump_time or check_collision(x,y-1, object_index)){
        state_changed = true;
        player_state = falling;
    }
    if( steps% 2 == 1){
        vel_y-=(jump_speed/steps);
    }
    steps++;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling

if(player_state == player_states.falling){
    if(state_changed){
        //TODO: different animation?
        if(sprite_index == spr_walking)
            sprite_index = spr_jumping;
        state_changed = false;
    }
    if( keyboard_check_pressed_any(global.jump)){
        if(has_double_jump){
            state_changed = true;
            player_state = player_states.double_jump;
        }
    }
    if( keyboard_check(global.left)){
        if(! keyboard_check(global.right)){
            vel_x-=air_move_speed;        
        }
    }
    if( keyboard_check(global.right)){
        if(! keyboard_check(global.left)){
            vel_x+=air_move_speed;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Landing
if(player_state == player_states.landing){
    if( state_changed){
        has_double_jump = true;
        if( keyboard_check(global.down) and abs(vel_x) &gt; minimum_roll_speed){//TODO: do we want a minimum roll speed
            player_state = player_states.rolling;
            state_changed = true;
        }
        else {
            //Acutally landing
            //Start animation, apply dampening
            sprite_index = spr_landing;
            image_speed = .6;
            state_changed = false;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rolling
if(player_state == player_states.rolling){
    if(state_changed) {
        //TODO: start animation
        //TODO: physics?
            sprite_index = spr_rolling;
            image_speed = 1;
        state_changed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wall_sliding
if(player_state == player_states.wall_slide){
    if(state_changed) {
        //TODO: make sprite
        state_changed = false;
    }
    if( keyboard_check(global.left)){
        if(! keyboard_check(global.right)){
            vel_x-=air_move_speed;
            if(!check_collision(x-1,y,object_index)){
                player_state = player_states.jumping;
                state_changed = true;
            }
        }
    }
    
    if( keyboard_check(global.right)){
        if(! keyboard_check(global.left)){
            vel_x+=air_move_speed;
            if(!check_collision(x+1,y,object_index)){
                player_state = player_states.jumping;
                state_changed = true;
            }
        }
    }
    
    if( ! keyboard_check(global.left) and ! keyboard_check(global.right)){
        player_state = player_states.jumping;
        state_changed = true;
    }
    
    if( keyboard_check_pressed_any(global.jump)) {
        state_changed = true;
        player_state = player_states.wall_jump;
    }
    
    if(!state_changed){
        vel_y*=wfrict;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wall_jump
if(player_state == player_states.wall_jump){
    if(state_changed){
        if(check_collision(x+1,y,object_index)){
            vel_x-=wall_jump_horizontal*jump_speed;
        }else {
            vel_x+=wall_jump_horizontal*jump_speed;
        }
        vel_y-=wall_jump_vertical*jump_speed;
        sprite_index = spr_jumping;
        //TODO: make &amp; start animation
        state_changed = false;    
    }
    
    if(keyboard_check_pressed_any(global.jump) and has_double_jump){
        state_changed = true;
        player_state = player_states.double_jump;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///double jump
if(player_state == player_states.double_jump){
    if(state_changed){
        //TODO:Apply force
        //TODO:Change animation
        
        state_changed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

if(player_state == player_states.death){
    if(state_changed){
        sprite_index = spr_dying;
        //TODO:start animation
        state_changed=false;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Position


//Update position
if (check_collision(x + vel_x, y, object_index))
{
    var xn = x;
    while(!check_collision(xn+sign(vel_x),y, object_index))
    {   
        xn += sign(vel_x);
    }
    x=xn;
    if(!place_meeting(x,y,obj_portal_left) &amp;&amp; ! place_meeting(x,y,obj_portal_right) || x==xprevious)
        vel_x = 0;
    else if(vel_y &gt;= 0){
        state_changed=true;
        player_state = player_states.wall_slide;
    }
}
else
    x+=vel_x;


if(check_collision(x,y+vel_y, object_index))
{
    var yn =y;
    while(!check_collision(x,yn+sign(vel_y), object_index))
    {
        yn += sign(vel_y);
    }
    y=yn;
    if(!place_meeting(x,y,obj_portal_left) &amp;&amp; ! place_meeting(x,y,obj_portal_right) || y==yprevious)
        vel_y = 0;
    else if(vel_y &gt;= 0){
        state_changed = true;
        player_state = player_states.landing;
    }
    
}
else
    y+=vel_y;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal_clear">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_moving_portal){
    instance_destroy();
}

with(obj_portal_right){
    instance_destroy();
}

with(obj_portal_left){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (player_state == player_states.landing){
    player_state = player_states.stationary;
    state_changed = true;
}
if (player_state == player_states.rolling){
    player_state = player_states.running;
    state_changed = true;
}

if (player_state = player_states.death){
    image_speed = 0;
    image_index = image_number - 1;
    instance_create(0,0,obj_fade);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do_lightning();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
