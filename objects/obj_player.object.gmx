<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///constants
global.right = ord('D');
global.left = ord('A');
global.up = ord('W');
global.down = ord('S');
global.left_portal = ord('Q');
global.right_portal = ord('E');
global.jump = vk_space;
global.throw = mb_left;
move_speed = 3;
air_move_speed = 2;
throw_speed = 25;//???

jump_speed = 15;
jump_time = 8;
steps = 0;


dampening = .9;//smaller is more dampening
frict = .9;//changes the dampening when in contact with the ground
height=36;
width=18;

gravity_x = 0;
gravity_y =1;

jumping = false;
vel_x=0;
vel_y=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

//Gravity
vel_x+=gravity_x;
vel_y+=gravity_y;

//Dampening
if(abs(vel_x) &lt; 1)
    vel_x=0;
vel_x*=dampening;
//if on ground apply friction
if( place_meeting(x,y+1,obj_wall))
    vel_x*=frict;
vel_y*=dampening;



//Update position
if(place_meeting(x+vel_x,y,obj_wall))
{
    while(!place_meeting(x+sign(vel_x),y,obj_wall))
    {
        x += sign(vel_x);
    }
    vel_x = 0;
}
x+=vel_x;


if(place_meeting(x,y+vel_y,obj_wall))
{
    while(!place_meeting(x,y+sign(vel_y),obj_wall))
    {
        y += sign(vel_y);
    }
    vel_y = 0;
}
y+=vel_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///key presses
if( keyboard_check(global.left))
{
    if( place_meeting(x,y+1,obj_wall))// On ground?
        vel_x-=move_speed;
    vel_x-=air_move_speed ;
}

if(keyboard_check_pressed(global.jump) &amp;&amp; place_meeting(x,y+1,obj_wall))
{
    show_debug_message("starting jump");
    jumping = true;
    steps = 0;
}
if(jumping) {
    steps+=1;
    if(steps % 2 == 1)
        vel_y-=(jump_speed/steps);
}
if(steps&gt; jump_time || keyboard_check_released(global.jump) || place_meeting(x,y-1,obj_wall)){
    jumping = false
}
if( keyboard_check(global.right))
{
    if( place_meeting(x,y+1,obj_wall))// On ground?
        vel_x+=move_speed;
    vel_x+=air_move_speed ;
}

//if( (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+height,obj_wall)) &amp;&amp; vel_y &lt;= 0 &amp;&amp; keyboard_check(global.jump))
//{
//    vel_y-=jump_speed ;
//}
if(mouse_check_button_pressed(global.throw))
{
    var inst = instance_create(x,y,obj_axe);
    with(inst)
    {
        var del_x = mouse_x-x;
        var del_y = mouse_y-y;
        var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
        vel_x=other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
        vel_y=other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
        image_xscale=sign(vel_x);
    }
}
if(keyboard_check(global.left_portal))
{
    with(obj_portal)
    {
        if(sprite_index==spr_left_portal)
            instance_destroy();
    }
    var inst = instance_create(mouse_x,mouse_y,obj_portal);//TODO find wall
    with(inst)
    {
        var del_x = mouse_x-x;
        var del_y = mouse_y-y;
        var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
        vel_x=other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
        vel_y=other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
        sprite_index=spr_left_portal;
    }
}
if(keyboard_check(global.right_portal))
{
    with(obj_portal)
    {
        if(sprite_index==spr_right_portal)
            instance_destroy();
    }
    var inst = instance_create(mouse_x,mouse_y,obj_portal);
    with(inst)
    {
        var del_x = mouse_x-x;
        var del_y = mouse_y-y;
        var x_percent =abs(del_x)/(abs(del_x)+abs(del_y));
        vel_x=other.vel_x+sign(del_x)*abs(x_percent*other.throw_speed);
        vel_y=other.vel_y+sign(del_y)*abs((1-x_percent)*other.throw_speed);
        sprite_index=spr_right_portal;
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
