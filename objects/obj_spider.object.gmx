<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constants
vel_x = 2;
vel_y = 2;
last_state = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("State: " + string(last_state));

if (x &gt; room_width || x &lt; 0 || y &lt; 0 || y &gt; room_height){
    instance_destroy();
}

var margin = sprite_height / 2 + 1;
var x_margin = - (sprite_height / 2) + 1;

// Let the dude walk on platforms
if (check_collision(x + x_margin * sign(vel_x),y + margin,object_index)){
    // Top
    last_state = 0;
    image_angle = 0;
    if (vel_x &lt; 0){
        image_xscale = -1;
    } else {
        image_xscale = 1;
    }
    x += vel_x;
} else if (check_collision(x+ x_margin * sign(vel_x),y - margin,object_index)){
    // Bottom
    last_state = 1;
    image_angle = 180;
    if (vel_x &lt; 0){
        image_xscale = 1;
    } else {
        image_xscale = -1;
    }
    x += vel_x;
} else if (check_collision(x + margin,y + x_margin * sign(vel_y),object_index)){
    // Left
    last_state = 2;
    image_angle = 90;
    if (vel_y &gt; 0){
        image_yscale = -1;
    } else {
        image_yscale = 1;
    }
    y += vel_y;
} else if (check_collision(x - margin,y + x_margin * sign(vel_y),object_index)){
    // Right
    last_state = 3;
    image_angle = 270;
    if (vel_y &lt; 0){
        image_yscale = -1;
    } else {
        image_yscale = 1;
    }
    y += vel_y;
} else {
    if (last_state == 0 || last_state == 1){
        if (last_state == 0){
            vel_y = abs(vel_y);
            image_angle = -45;
        } else {
            vel_y = -abs(vel_y);
            image_angle = 135;
        }
        y += vel_y;
        while (!check_collision(x + margin,y,object_index) &amp;&amp; !check_collision(x - margin,y,object_index)){
            y += vel_y;
        }
    } else if (last_state == 2 || last_state == 3){
        if (last_state == 2){
            vel_x = abs(vel_x);
            image_angle = 45;
        } else {
            vel_x = -abs(vel_x);
            image_angle = -135;
        }
        x += vel_x;
        image_angle -= 45;
        while (!check_collision(x,y + margin,object_index) &amp;&amp; !check_collision(x,y - margin,object_index)){
            x += vel_x;
        }
    } else {
        show_debug_message("You fucked the spider...");
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kill_player();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_axe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill if axe

destroy = false;

with(obj_axe){
    if (abs(vel_x) &gt;= 0.01 &amp;&amp; abs(vel_y) &gt;= 0.01){
        other.destroy = true;
    }
}

if (destroy){
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
